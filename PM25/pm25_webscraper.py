# -*- coding: utf-8 -*-
"""pm25_scraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTTk-XguZlQkmPgedGjOIkATuayJKOYX

# Spatiotemporal Air Quality Data from California, USA
"""

from google.colab import drive
drive.mount("/content/gdrive")

! pip install geopandas contextily meteostat

import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx
import requests
import json
import time
from meteostat import Point, Daily
from datetime import datetime
import geopandas as gpd
from shapely.geometry import Point
import contextily as ctx
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""### scrape the data"""

cities_response = requests.get("https://api.openaq.org/v2/cities",
params={'country': 'US',
        'parameter': 'pm25',
        'date_from': '2023-06-01',
        'date_to': '2023-10-31',
        'limit': 10000})
cities_data = cities_response.json()
print(json.dumps(cities_data, indent=2))

cities_list = [city['city'] for city in cities_data.get('results', [])]

len(cities_list)

# fetch PM2.5 data for a specific city
def fetch_pm25_data(city):
    params = {
        '==country': 'US',
        'city': city,
        'parameter': 'pm25',
        'date_from': '2023-06-01',
        'date_to': '2023-10-31',
        'limit': 10000,
        'page': 1
    }

    all_results = []

    while True:
        response = requests.get("https://api.openaq.org/v2/measurements", params=params)
        response_json = response.json()

        if 'results' in response_json and response_json['results']:
            all_results.extend(response_json['results'])
        else:
            break

        if len(response_json['results']) < params['limit']:
            break

        params['page'] += 1
        time.sleep(1)

    return pd.DataFrame(all_results)



all_city_data = pd.DataFrame()

for city in cities_list:
    city_data = fetch_pm25_data(city)
    ca_air = pd.concat([ca_air, city_data], ignore_index=True)

ca_air.to_csv("/content/gdrive/MyDrive/PM2.5/CA_air.csv")

ca_air = pd.read_csv("/content/gdrive/MyDrive/PM2.5/CA_air.csv")
ca_air

def fetch_meteorological_data(df):
    weather_data = []
    for index, row in df.iterrows():
        lat = row['SITE_LATITUDE']
        lon = row['SITE_LONGITUDE']
        date = row['Date']

        date = datetime.strptime(date, '%m/%d/%y')

        location = Point(lat, lon)

        weather = Daily(location, date, date)
        weather = weather.fetch()

        if not weather.empty:
            weather_data.append(weather.iloc[0].to_dict())
        else:
            weather_data.append({
                'tavg': None,
                'tmin': None,
                'tmax': None,
                'prcp': None,
                'wspd': None,
                'pres': None,
                'snow': None
            })

    weather_df = pd.DataFrame(weather_data)
    weather_df.index = df.index
    combined_df = pd.concat([df, weather_df], axis=1)

    return combined_df

new_ca_air = fetch_meteorological_data(ca_air)
new_ca_air

new_ca_air.to_csv("/content/gdrive/MyDrive/PM2.5/new_CA_air.csv")

new_ca_air = pd.read_csv("/content/gdrive/MyDrive/PM2.5/new_CA_air.csv")

"""### slight negative values due to measurement error, set equal to 0"""

new_ca_air['Daily Mean PM2.5 Concentration'] = new_ca_air['Daily Mean PM2.5 Concentration'].apply(lambda x: max(x, 0))

new_ca_air['log_PM2.5'] = np.log1p(new_ca_air['Daily Mean PM2.5 Concentration'])
plt.figure(figsize=(10, 6))
plt.hist(new_ca_air['log_PM2.5'], bins=30, color='skyblue', edgecolor='black')
plt.title('Histogram of Log Daily Mean PM2.5 Concentration')
plt.xlabel('Log of Daily Mean PM2.5 Concentration')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.kdeplot(new_ca_air['log_PM2.5'], shade=True, color='skyblue')
plt.title('KDE Plot of Daily Mean PM2.5 Concentration')
plt.xlabel('Daily Mean PM2.5 Concentration')
plt.ylabel('Density')
plt.show()

geometry = [Point(xy) for xy in zip(new_ca_air['SITE_LONGITUDE'], new_ca_air['SITE_LATITUDE'])]
gdf = gpd.GeoDataFrame(new_ca_air, geometry=geometry)

gdf.set_crs(epsg=4326, inplace=True)
gdf = gdf.to_crs(epsg=3857)

fig, ax = plt.subplots(figsize=(10, 10))
gdf.plot(ax=ax, marker='o', color='red', alpha=0.1)
ctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron)

ax.set_title('PM2.5 Measurement Locations in California')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

plt.show()

geometry = [Point(xy) for xy in zip(new_ca_air['SITE_LONGITUDE'], new_ca_air['SITE_LATITUDE'])]
gdf = gpd.GeoDataFrame(new_ca_air, geometry=geometry)

gdf.set_crs(epsg=4326, inplace=True)
gdf = gdf.to_crs(epsg=3857)

fig, ax = plt.subplots(figsize=(10, 10))

gdf.plot(ax=ax, marker='o', column='log_PM2.5', cmap='YlOrRd', alpha=0.7, legend=True, vmin=0, vmax=5)

ctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron)

ax.set_title('Distribution of Log PM2.5 Levels in California')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
plt.show()

new_ca_air